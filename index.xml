<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bourbon&#39;s Blog</title>
    <link>localhost/</link>
    <description>Recent content on Bourbon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 23 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="localhost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSI-CTF Writeup (Part-3)</title>
      <link>localhost/posts/ctf-3/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>localhost/posts/ctf-3/</guid>
      <description>This is the 3rd and final part of the 3-part series for the CSI-CTF writeup. Click here to read 1st part or 2nd part.
You can register and play this CTF. It&amp;rsquo;s open to everyone.
In this 3-part series, we will see my method of approaching these challenges and how I solved them. The 9 challenges are divided into 3 posts.
Decode It The challenge gives us a pretty clear hint that each line is mapped to the single character (The hint is ambiguous, character could either mean the person or a character in the flag).</description>
    </item>
    
    <item>
      <title>CSI-CTF Writeup (Part-2)</title>
      <link>localhost/posts/ctf-2/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>localhost/posts/ctf-2/</guid>
      <description>This is the part 2 of the 3-part series for the CSI-CTF writeup. Click Here to read the 1st part.
You can register and play this CTF. It&amp;rsquo;s open to everyone.
In this 3-part series, we will see my method of approaching these challenges and how I solved them. The 9 challenges are divided into 3 posts.
Attack on Bank The challenge description gives us info about the encrypted text (Also notice how ECB abbreviation gives us a hint about 128-bit AES-ECB being the cryptosystem).</description>
    </item>
    
    <item>
      <title>CSI-CTF Writeup (Part-1)</title>
      <link>localhost/posts/ctf-1/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>localhost/posts/ctf-1/</guid>
      <description>I recently won 1st place at the CSI-CTF 2022. The CTF was basic, but still amazing (We find that the two things are often mutually exclusive in many CTFs). The challenges were easy, but not lame. The UI was fantastic. I was impressed by the CTF infrastructure. It is not easy to host a CTF this well.
You can register and play this CTF. It&amp;rsquo;s open to everyone.
In this 3-part series, we will see my method of approaching these challenges and how I solved them.</description>
    </item>
    
    <item>
      <title>Swallow</title>
      <link>localhost/posts/swallow/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>localhost/posts/swallow/</guid>
      <description>Throughout the discussion, C-x means Control + x keychord.
Introduction Window swallowing is a mechanism in tiling window managers, by which a GUI application&amp;rsquo;s window can replace the terminal window in-place, when the application is called from the terminal.
This avoids congestion in tiling WMs, and is a much preferred solution than zooming into the said GUI window (Also called monocle mode in some WMs)
For instance, consider a scenario where I want to spawn VLC from my terminal.</description>
    </item>
    
    <item>
      <title>ls clone using getdents syscall</title>
      <link>localhost/posts/fp/</link>
      <pubDate>Mon, 15 Nov 2021 18:20:39 +0530</pubDate>
      
      <guid>localhost/posts/fp/</guid>
      <description>Introduction In this short post, weâ€™re building a barebones,toy implementation of the ls-like directory listing program in x86-64 assembly. We achieve this by using the getdents syscall.
getdents() syscall The getdents syscall takes in 3 parameters. So the prototype of the syscall looks like: ssize_t getdents(int fd, void *dirp, size_t count), where:
 fd : is the file descriptor of the directory (which is also just another file in Unix) dirp : is where all the dirent structs are copied during the syscall.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>localhost/setup/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>localhost/setup/</guid>
      <description>All technologies are cool
This page describes the setup that I use in my desktop experience while describing the decisions that were made while selecting the components. It is irregularly updated.
OS: Arch Linux Arch is a fantastic Linux distribution that&amp;rsquo;s pretty lean and mean for all sorts of use cases. It&amp;rsquo;s primary advantage to me is the fact that I have to perform least amount of configuration, in the case where I ever need to reinstall my system.</description>
    </item>
    
  </channel>
</rss>
